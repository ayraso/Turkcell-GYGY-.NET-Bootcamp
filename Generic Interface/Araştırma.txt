
Covariance
Yavrudan ataya doðru bir genelleþtirmedir. 
Inheritance kavramýyla ayný doðrultuda çalýþýr.
Ör.: 
Bira bardaðý bir meþrubat bardaðýdýr.
yavru-------      ata     ----------
Bardak, kovaryanttýr.

Contravariance
Atadan yavruya doðru bir genelleþtirmedir.
Ör.:
Alkol baðýmlýsý bira baðýmlýsýdýr.
ata --------- yavru  -------------
Baðýmlý olan kiþi, kontravaryanttýr.


Read/Write-Only

covariance = read-only
Ör.:
Meþrubat bardaðýna biranýn yaný sýra gazoz da konulursa, o bardak artýk sadece bira bardaðý olmaz.
Bira bardaðýnýn meþrubat bardaðýna yeni eklenen özellikler yüzünden deðiþmesini istemeyiz. Bu yüzden;
"Bira bardaðý bir meþrubat bardaðýdýr." cümlesi aþaðýdaki gibi deðiþir.:
"Bira bardaðý, meþrubat bardaðý hiç deðiþtirilmediði sürece hem bira bardaðý hem de meþrubat bardaðýdýr."
Bu da covariant bardak nesnesini read-only olmak zorunda býrakýr.

contravariance = write-only
Ör.:
Alkol baðýmlýsý neye baðýmlý olduðunu söylerse (programla konseptinde 'return' ederse),
alkol baðýmlýsý kiþinin bira baðýmlýlýðý yerine votka baðýmlýlýðý return etme olasýlýðý ortaya çýkar.
Bu durum, "Alkol baðýmlýsý bira baðýmlýsýdýr." cümlesinin her koþulda doðru olmasýný engeller.
Bu yüzden önerme aþaðýdaki þekilde deðiþir.:
"Baðýmlý kiþi, biz neye baðýmlý olduðunu bilmediðimiz sürece hem bira hem de alkol baðýmlýsýdýr."
Bu da baðýmlý kiþi nesnesini write-only olmak zorunda býrakýr.

Toparlamak gerekirse; 
Bardak her zaman yalnýzca T return eder ve hiçbir zaman T'yi parametre olarak almaz. 
Baðýmlý kiþi hiçbir zaman T return etmez ve her zaman sadece T parametresi alýr.

Invariance = neither

Generic Type, class olmak zorunda deðil; interface de olabilir.

Aþaðýda bu kavramlarýn neden kullanýldýðýný açýklamak adýna bir örnek kod paylaþýyorum.:
------------------------------------------main.cpp-----
class MesrubatBardagi { }
class BiraBardagi : MesrubatBardagi { }
 
interface Bardaklarim<T> { }
 
class Program
{
    static void Main(string[] args)
    {
        Bardaklarim<BiraBardagi> biraB = null;
        Bardaklarim<MesrubatBardagi> mesrubatB = biraB;
    }
}
-------------------------------------------------------
Bu kod, bira bardaðý (biraB) read-only olmadýðý için Bardaklarim Interface'ine parametre olarak gelebilecek gazozlar yüzünden compile etmez.
Nesnenin read-only (covariant) olduðunu belirtmek için "out" keyword'ü kullanýlýr.
-------------------------------------------------------
interface Bardaklarim<out T> { }
-------------------------------------------------------
Bardaklarim interfaceine, bardaða dolum yapan bir fonksiyon eklemek istiyorsak, 
interface'i (write-only) contravariance yapmamýz gerekir. Bunun için "in" keyword'ü kullanýrýz.
-------------------------------------------------------
interface Bardaklarim<in T> 
{
    void Dolum(T bardak);
}
-------------------------------------------------------



https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces

https://web.archive.org/web/20140626123445/http://adamnathan.co.uk/?p=75

https://stackoverflow.com/questions/2719954/understanding-covariant-and-contravariant-interfaces-in-c-sharp




